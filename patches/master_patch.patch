diff --git a/build/config/chrome_build.gni b/build/config/chrome_build.gni
index c649018a7a0aeb20caeb2bf37c60d57c48630f1b..9a320d8b5f46f2c7f2d269b7a1cc3b2cf91c07a7 100644
--- a/build/config/chrome_build.gni
+++ b/build/config/chrome_build.gni
@@ -18,5 +18,5 @@ declare_args() {
 if (is_chrome_branded) {
   branding_path_component = "google_chrome"
 } else {
-  branding_path_component = "chromium"
+  branding_path_component = "brave"
 }
diff --git a/chrome/BUILD.gn b/chrome/BUILD.gn
index cf36e40ee5426464cee670a11128a0e11ca49efd..94b5a52ee73e150c82bea889bd3d2b733558c68e 100644
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -52,7 +52,7 @@ if (is_win) {
       "$root_out_dir/initialexe/chrome.exe",
     ]
     outputs = [
-      "$root_out_dir/chrome.exe",
+      "$root_out_dir/brave.exe",
     ]
     if (symbol_level != 0) {
       outputs += [ "$root_out_dir/chrome.exe.pdb" ]
@@ -253,6 +253,8 @@ if (!is_android && !is_mac) {
           "app/chrome_main.cc",
           "app/chrome_main_delegate.cc",
           "app/chrome_main_delegate.h",
+          "//brave/app/brave_main_delegate.cc",
+          "//brave/app/brave_main_delegate.h",
         ]
 
         deps += [
@@ -325,7 +327,7 @@ if (!is_android && !is_mac) {
     if (is_win) {
       output_name = "initialexe/chrome"
     } else {
-      output_name = "chrome"
+      output_name = "brave"
     }
 
     sources = []
@@ -375,6 +377,8 @@ if (is_win) {
       "app/chrome_main.cc",
       "app/chrome_main_delegate.cc",
       "app/chrome_main_delegate.h",
+      "//brave/app/brave_main_delegate.cc",
+      "//brave/app/brave_main_delegate.h",
       "app/chrome_main_mac.h",
       "app/chrome_main_mac.mm",
     ]
@@ -488,6 +492,8 @@ if (is_win) {
         "app/chrome_main.cc",
         "app/chrome_main_delegate.cc",
         "app/chrome_main_delegate.h",
+        "//brave/app/brave_main_delegate.cc",
+        "//brave/app/brave_main_delegate.h",
       ]
 
       configs += [ "//build/config/compiler:wexit_time_destructors" ]
@@ -557,7 +563,9 @@ if (is_win) {
 } else if (is_mac) {
   chrome_helper_name = chrome_product_full_name + " Helper"
   chrome_framework_name = chrome_product_full_name + " Framework"
-  chrome_framework_version = "A"
+  # TODO(bridiver) - not sure why this has to be commented out, but otherwise
+  # it puts the framework in the wrong place for chrome_exe_main_mac.cc
+  # chrome_framework_version = "A"
 
   group("chrome") {
     deps = [
@@ -672,7 +680,7 @@ if (is_win) {
     args =
         [
           "-b",
-          "${branding_path_component}_strings",
+          _strings_file,
           "-v",
           rebase_path(chrome_version_file, root_build_dir),
           "-g",
@@ -1173,6 +1181,8 @@ if (is_win) {
       "app/chrome_main.cc",
       "app/chrome_main_delegate.cc",
       "app/chrome_main_delegate.h",
+      "//brave/app/brave_main_delegate.cc",
+      "//brave/app/brave_main_delegate.h",
       "app/chrome_main_mac.h",
       "app/chrome_main_mac.mm",
     ]
@@ -1416,6 +1426,7 @@ if (is_win) {
 
 group("browser_dependencies") {
   public_deps = [
+    "//brave:browser_dependencies",
     "//chrome/browser",
     "//chrome/common",
     "//components/sync",
@@ -1452,6 +1463,7 @@ group("browser_dependencies") {
 
 group("child_dependencies") {
   public_deps = [
+    "//brave:child_dependencies",
     "//chrome/browser/devtools",
     "//chrome/child",
     "//chrome/common",
@@ -1739,6 +1751,8 @@ if (is_android) {
       "app/android/chrome_main_delegate_android.h",
       "app/chrome_main_delegate.cc",
       "app/chrome_main_delegate.h",
+      "//brave/app/brave_main_delegate.cc",
+      "//brave/app/brave_main_delegate.h",
     ]
 
     include_dirs = [ android_ndk_include_dir ]
@@ -1825,7 +1839,7 @@ if (is_linux) {
       dump_syms_binary =
           get_label_info(dump_syms_label, "root_out_dir") + "/" + "dump_syms"
 
-      chrome_binary = "$root_out_dir/chrome"
+      chrome_binary = "$root_out_dir/brave"
       if (current_cpu == "x86") {
         # GYP used "ia32" so keep that naming for back-compat.
         symbol_file = "$root_out_dir/chrome.breakpad.ia32"
diff --git a/chrome/app/BUILD.gn b/chrome/app/BUILD.gn
index f85f3d75cf76d8861a1f57ce9b799d60e830e878..0275be6c254d7cce443913ddc7f1fab14ff4dcc0 100644
--- a/chrome/app/BUILD.gn
+++ b/chrome/app/BUILD.gn
@@ -243,7 +243,7 @@ grit("google_chrome_strings") {
 }
 
 grit("chromium_strings") {
-  source = "chromium_strings.grd"
+  source = "${branding_path_component}_strings.grd"
   defines = chrome_grit_defines
   output_dir = "$root_gen_dir/chrome"
   outputs = [
diff --git a/chrome/app/chrome_main.cc b/chrome/app/chrome_main.cc
index e05f30380d9d06fb15a7922aead3f4f82abbe9f1..5464cf08b360bce105d4ece3d7b6e29a522f5849 100644
--- a/chrome/app/chrome_main.cc
+++ b/chrome/app/chrome_main.cc
@@ -7,6 +7,7 @@
 #include "base/callback_helpers.h"
 #include "base/command_line.h"
 #include "base/time/time.h"
+#include "brave/app/brave_main_delegate.h"
 #include "build/build_config.h"
 #include "chrome/app/chrome_main_delegate.h"
 #include "chrome/common/chrome_switches.h"
@@ -60,7 +61,7 @@ int ChromeMain(int argc, const char** argv) {
   install_static::InitializeFromPrimaryModule();
 #endif
 
-  ChromeMainDelegate chrome_main_delegate(
+  BraveMainDelegate chrome_main_delegate(
       base::TimeTicks::FromInternalValue(exe_entry_point_ticks));
   content::ContentMainParams params(&chrome_main_delegate);
 
diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
index 27e5f84cb1f06d0a1cd766beace97d5b20317928..23841a71e3e7060727dab6f47b90356cb985f733 100644
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -1760,6 +1760,7 @@ split_static_library("browser") {
     "//ui/strings",
     "//ui/surface",
     "//ui/web_dialogs",
+    "//brave/browser:browser_process",
   ]
 
   # Android does in-process PAC, so must link against V8 directly. Other
diff --git a/chrome/browser/android/omnibox/autocomplete_controller_android.cc b/chrome/browser/android/omnibox/autocomplete_controller_android.cc
index aced4afd35825d2ce08b1844b6e6fceafbdf6c01..dd0ee11964ce8a13ca1688b4899e316fad046fd4 100644
--- a/chrome/browser/android/omnibox/autocomplete_controller_android.cc
+++ b/chrome/browser/android/omnibox/autocomplete_controller_android.cc
@@ -90,7 +90,7 @@ class ZeroSuggestPrefetcher : public AutocompleteControllerDelegate {
 };
 
 ZeroSuggestPrefetcher::ZeroSuggestPrefetcher(Profile* profile)
-    : controller_(new AutocompleteController(
+    : controller_(new BraveAutocompleteController(
           base::MakeUnique<ChromeAutocompleteProviderClient>(profile),
           this,
           AutocompleteProvider::TYPE_ZERO_SUGGEST)) {
@@ -126,7 +126,7 @@ void ZeroSuggestPrefetcher::OnResultChanged(bool default_match_changed) {
 }  // namespace
 
 AutocompleteControllerAndroid::AutocompleteControllerAndroid(Profile* profile)
-    : autocomplete_controller_(new AutocompleteController(
+    : autocomplete_controller_(new BraveAutocompleteController(
           base::WrapUnique(new ChromeAutocompleteProviderClient(profile)),
           this,
           AutocompleteClassifier::DefaultOmniboxProviders())),
diff --git a/chrome/browser/autocomplete/autocomplete_classifier_factory.cc b/chrome/browser/autocomplete/autocomplete_classifier_factory.cc
index 546f574bd2d3577413f2d13cfa058bf90c3c77bf..eb4364774a6f53e718d860e7ff533d6b666a86d0 100644
--- a/chrome/browser/autocomplete/autocomplete_classifier_factory.cc
+++ b/chrome/browser/autocomplete/autocomplete_classifier_factory.cc
@@ -23,6 +23,8 @@
 #include "extensions/browser/extensions_browser_client.h"
 #endif
 
+#include "brave/components/omnibox/browser/brave_autocomplete_controller.h"
+
 // static
 AutocompleteClassifier* AutocompleteClassifierFactory::GetForProfile(
     Profile* profile) {
@@ -40,7 +42,7 @@ std::unique_ptr<KeyedService> AutocompleteClassifierFactory::BuildInstanceFor(
     content::BrowserContext* context) {
   Profile* profile = static_cast<Profile*>(context);
   return base::MakeUnique<AutocompleteClassifier>(
-      base::WrapUnique(new AutocompleteController(
+      base::WrapUnique(new BraveAutocompleteController(
           base::WrapUnique(new ChromeAutocompleteProviderClient(profile)), NULL,
           AutocompleteClassifier::DefaultOmniboxProviders())),
       std::unique_ptr<AutocompleteSchemeClassifier>(
diff --git a/chrome/browser/browser_process_impl.cc b/chrome/browser/browser_process_impl.cc
index 675e9220b5fe7b71240ac28ab4e4fb97fae6fd96..b84fa6b7fd7259217c7e9b0932c566ec65d9bac6 100644
--- a/chrome/browser/browser_process_impl.cc
+++ b/chrome/browser/browser_process_impl.cc
@@ -34,6 +34,7 @@
 #include "base/time/default_clock.h"
 #include "base/time/default_tick_clock.h"
 #include "base/trace_event/trace_event.h"
+#include "brave/components/brave_shields/browser/brave_resource_dispatcher_host_delegate.h"
 #include "build/build_config.h"
 #include "chrome/browser/chrome_browser_main.h"
 #include "chrome/browser/chrome_child_process_watcher.h"
@@ -1004,7 +1005,7 @@ BrowserProcessImpl::supervised_user_whitelist_installer() {
 
 void BrowserProcessImpl::ResourceDispatcherHostCreated() {
   resource_dispatcher_host_delegate_ =
-      base::MakeUnique<ChromeResourceDispatcherHostDelegate>();
+      base::MakeUnique<BraveResourceDispatcherHostDelegate>();
   ResourceDispatcherHost::Get()->SetDelegate(
       resource_dispatcher_host_delegate_.get());
 
diff --git a/chrome/browser/browser_process_impl.h b/chrome/browser/browser_process_impl.h
index 454080193dbbb41b6bea01416f28f210b26aaff0..786de33e900d9c521de48ffe570651c347088a4e 100644
--- a/chrome/browser/browser_process_impl.h
+++ b/chrome/browser/browser_process_impl.h
@@ -164,6 +164,7 @@ class BrowserProcessImpl : public BrowserProcess,
   static void RegisterPrefs(PrefRegistrySimple* registry);
 
  private:
+  friend class BraveBrowserProcessImpl;
   // KeepAliveStateObserver implementation
   void OnKeepAliveStateChanged(bool is_keeping_alive) override;
   void OnKeepAliveRestartStateChanged(bool can_restart) override;
diff --git a/chrome/browser/chrome_browser_main.cc b/chrome/browser/chrome_browser_main.cc
index d9baddce633a13532837c1948f17d96fd98fad67..5c9169f61028b44194adcef083c427ae684edb6a 100644
--- a/chrome/browser/chrome_browser_main.cc
+++ b/chrome/browser/chrome_browser_main.cc
@@ -43,6 +43,7 @@
 #include "base/time/time.h"
 #include "base/trace_event/trace_event.h"
 #include "base/values.h"
+#include "brave/browser/brave_browser_process_impl.h"
 #include "build/build_config.h"
 #include "cc/base/switches.h"
 #include "chrome/browser/about_flags.h"
@@ -961,7 +962,7 @@ int ChromeBrowserMainParts::PreCreateThreadsImpl() {
   {
     TRACE_EVENT0("startup",
       "ChromeBrowserMainParts::PreCreateThreadsImpl:InitBrowswerProcessImpl");
-    browser_process_.reset(new BrowserProcessImpl(local_state_task_runner.get(),
+    browser_process_.reset(new BraveBrowserProcessImpl(local_state_task_runner.get(),
                                                   parsed_command_line()));
   }
 
diff --git a/chrome/browser/chrome_content_browser_client.h b/chrome/browser/chrome_content_browser_client.h
index 9361b28fb3ac91e61837d7c707e9f4a9ec73c7c6..c5eee899ae5f42b974645240f17aabeb156a9ec5 100644
--- a/chrome/browser/chrome_content_browser_client.h
+++ b/chrome/browser/chrome_content_browser_client.h
@@ -350,6 +350,7 @@ class ChromeContentBrowserClient : public content::ContentBrowserClient {
                                  content::BrowserContext* browser_context);
 
  private:
+  friend class BraveContentBrowserClient;
   friend class DisableWebRtcEncryptionFlagTest;
   friend class InProcessBrowserTest;
 
diff --git a/chrome/browser/extensions/chrome_extensions_browser_client.cc b/chrome/browser/extensions/chrome_extensions_browser_client.cc
index 4398370da586e80f51b5e8517a49174236fa78c3..3b5d2a849aaa5c4d5bbd4feaaee640ccc0edefbd 100644
--- a/chrome/browser/extensions/chrome_extensions_browser_client.cc
+++ b/chrome/browser/extensions/chrome_extensions_browser_client.cc
@@ -10,6 +10,7 @@
 #include "base/memory/ptr_util.h"
 #include "base/version.h"
 #include "build/build_config.h"
+#include "brave/common/extensions/api/generated_api_registration.h"
 #include "chrome/browser/app_mode/app_mode_utils.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/extensions/activity_log/activity_log.h"
@@ -277,6 +278,9 @@ void ChromeExtensionsBrowserClient::RegisterExtensionFunctions(
 
   // Generated APIs from Chrome.
   api::ChromeGeneratedFunctionRegistry::RegisterAll(registry);
+
+  // Generated APIs from Brave.
+  api::BraveGeneratedFunctionRegistry::RegisterAll(registry);
 }
 
 void ChromeExtensionsBrowserClient::RegisterExtensionInterfaces(
diff --git a/chrome/browser/net/chrome_network_delegate.h b/chrome/browser/net/chrome_network_delegate.h
index e055ef156da9ea78b1dee96ee04f9c061267c775..5ffcecf64f39f3ff593cd30d9c1ef551be5f1a27 100644
--- a/chrome/browser/net/chrome_network_delegate.h
+++ b/chrome/browser/net/chrome_network_delegate.h
@@ -144,6 +144,8 @@ class ChromeNetworkDelegate : public net::NetworkDelegateImpl {
   static void EnableAccessToAllFilesForTesting(bool enabled);
 
  private:
+  friend class BraveNetworkDelegate;
+
   // NetworkDelegate implementation.
   int OnBeforeURLRequest(net::URLRequest* request,
                          const net::CompletionCallback& callback,
diff --git a/chrome/browser/profiles/profile.cc b/chrome/browser/profiles/profile.cc
index 6543b311290610794c4734eb3dd14f36ae810ae3..ee79bf52518d500ff7f99ce720a1baf842d4f547 100644
--- a/chrome/browser/profiles/profile.cc
+++ b/chrome/browser/profiles/profile.cc
@@ -136,7 +136,7 @@ const char Profile::kNoHostedDomainFound[] = "NO_HOSTED_DOMAIN";
 void Profile::RegisterProfilePrefs(user_prefs::PrefRegistrySyncable* registry) {
   registry->RegisterBooleanPref(
       prefs::kSearchSuggestEnabled,
-      true,
+      false,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
 #if defined(OS_ANDROID)
   registry->RegisterStringPref(
diff --git a/chrome/browser/profiles/profile_io_data.cc b/chrome/browser/profiles/profile_io_data.cc
index 1a41943ac2fd649665fd488b889b5a9dd3ec4512..c06d2aca1f0e183b7989d3bbe25ae64c8bde0c95 100644
--- a/chrome/browser/profiles/profile_io_data.cc
+++ b/chrome/browser/profiles/profile_io_data.cc
@@ -25,6 +25,7 @@
 #include "base/strings/string_util.h"
 #include "base/task_scheduler/post_task.h"
 #include "base/threading/thread_task_runner_handle.h"
+#include "brave/browser/net/brave_network_delegate.h"
 #include "build/build_config.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/chrome_notification_types.h"
@@ -1032,7 +1033,7 @@ void ProfileIOData::Init(
   builder->set_enable_brotli(io_thread_globals->enable_brotli);
 
   std::unique_ptr<ChromeNetworkDelegate> chrome_network_delegate(
-      new ChromeNetworkDelegate(
+      new BraveNetworkDelegate(
 #if BUILDFLAG(ENABLE_EXTENSIONS)
           io_thread_globals->extension_event_router_forwarder.get(),
 #else
diff --git a/chrome/browser/ui/app_list/search/omnibox_provider.cc b/chrome/browser/ui/app_list/search/omnibox_provider.cc
index c36e417eff2fbba457e66e495612fc0bbbbfd6d9..d0255fe360e6e50e0f3b37daef01be586ecf4555 100644
--- a/chrome/browser/ui/app_list/search/omnibox_provider.cc
+++ b/chrome/browser/ui/app_list/search/omnibox_provider.cc
@@ -24,7 +24,7 @@ OmniboxProvider::OmniboxProvider(Profile* profile,
                                  AppListControllerDelegate* list_controller)
     : profile_(profile),
       list_controller_(list_controller),
-      controller_(new AutocompleteController(
+      controller_(new BraveAutocompleteController(
           base::WrapUnique(new ChromeAutocompleteProviderClient(profile)),
           this,
           AutocompleteClassifier::DefaultOmniboxProviders() &
diff --git a/chrome/browser/ui/tab_helpers.cc b/chrome/browser/ui/tab_helpers.cc
index d992488f5858af8378328a05e72e64a13ba388b9..2003b7336bd34d23f09c4ee77511a262ecc680ea 100644
--- a/chrome/browser/ui/tab_helpers.cc
+++ b/chrome/browser/ui/tab_helpers.cc
@@ -10,6 +10,7 @@
 #include "base/command_line.h"
 #include "base/feature_list.h"
 #include "base/memory/ptr_util.h"
+#include "brave/browser/brave_tab_helpers.h"
 #include "build/build_config.h"
 #include "chrome/browser/bookmarks/bookmark_model_factory.h"
 #include "chrome/browser/browser_process.h"
@@ -179,6 +180,7 @@ void TabHelpers::AttachTabHelpers(WebContents* web_contents) {
   BookmarkLastVisitUpdater::MaybeCreateForWebContentsWithBookmarkModel(
       web_contents, BookmarkModelFactory::GetForBrowserContext(
                         web_contents->GetBrowserContext()));
+  brave::AttachTabHelpers(web_contents);
   chrome_browser_net::NetErrorTabHelper::CreateForWebContents(web_contents);
   chrome_browser_net::PredictorTabHelper::CreateForWebContents(web_contents);
   if (base::FeatureList::IsEnabled(kDecoupleTranslateLanguageFeature)) {
diff --git a/chrome/browser/ui/webui/omnibox/omnibox_page_handler.cc b/chrome/browser/ui/webui/omnibox/omnibox_page_handler.cc
index 1be9a7b720273d4ddc49d516085ba3b3cd220b36..3fc64a1a786eb3ba15b6a2e4b7a24354f1974471 100644
--- a/chrome/browser/ui/webui/omnibox/omnibox_page_handler.cc
+++ b/chrome/browser/ui/webui/omnibox/omnibox_page_handler.cc
@@ -34,6 +34,8 @@
 #include "components/search_engines/template_url.h"
 #include "content/public/browser/web_ui.h"
 
+#include "brave/components/omnibox/browser/brave_autocomplete_controller.h"
+
 using bookmarks::BookmarkModel;
 
 namespace mojo {
@@ -209,7 +211,7 @@ void OmniboxPageHandler::StartOmniboxQuery(const std::string& input_string,
 }
 
 void OmniboxPageHandler::ResetController() {
-  controller_.reset(new AutocompleteController(
+  controller_.reset(new BraveAutocompleteController(
       base::MakeUnique<ChromeAutocompleteProviderClient>(profile_), this,
       AutocompleteClassifier::DefaultOmniboxProviders()));
 }
diff --git a/chrome/common/chrome_constants.cc b/chrome/common/chrome_constants.cc
index 99a3f816756039a628dc3032cbda3971dd415138..2cf32156411bd3a28e8c8096e25dcee5afcf04ad 100644
--- a/chrome/common/chrome_constants.cc
+++ b/chrome/common/chrome_constants.cc
@@ -10,11 +10,11 @@
 #define FPL FILE_PATH_LITERAL
 
 #if defined(OS_MACOSX)
-#define CHROMIUM_PRODUCT_STRING "Chromium"
+#define CHROMIUM_PRODUCT_STRING "Brave"
 #if defined(GOOGLE_CHROME_BUILD)
 #define PRODUCT_STRING "Google Chrome"
 #elif defined(CHROMIUM_BUILD)
-#define PRODUCT_STRING "Chromium"
+#define PRODUCT_STRING "Brave"
 #else
 #error Unknown branding
 #endif
diff --git a/chrome/common/extensions/api/BUILD.gn b/chrome/common/extensions/api/BUILD.gn
index ad3703177d68941b91d570bcfa001848ffa179a9..deae657f78e081a46b551569e626d84d6cd76c2d 100644
--- a/chrome/common/extensions/api/BUILD.gn
+++ b/chrome/common/extensions/api/BUILD.gn
@@ -84,6 +84,7 @@ schema_sources = [
   "webstore_widget_private.idl",
   "windows.json",
 ]
+
 if (!is_android) {
   schema_sources += [ "processes.idl" ]
 }
diff --git a/chrome/common/extensions/chrome_extensions_client.cc b/chrome/common/extensions/chrome_extensions_client.cc
index c4b6d014fe94d37a0e16802e7c644a990326d6f4..86e4cd06c08af21c7ff8b664010316e3f304959c 100644
--- a/chrome/common/extensions/chrome_extensions_client.cc
+++ b/chrome/common/extensions/chrome_extensions_client.cc
@@ -13,6 +13,13 @@
 #include "base/metrics/histogram_macros.h"
 #include "base/strings/string_util.h"
 #include "base/values.h"
+#include "brave/common/extensions/api/api_features.h"
+#include "brave/common/extensions/api/behavior_features.h"
+#include "brave/common/extensions/api/generated_api_registration.h"
+#include "brave/common/extensions/api/generated_schemas.h"
+#include "brave/common/extensions/api/grit/brave_api_resources.h"
+#include "brave/common/extensions/api/manifest_features.h"
+#include "brave/common/extensions/api/permission_features.h"
 #include "chrome/common/chrome_content_client.h"
 #include "chrome/common/chrome_switches.h"
 #include "chrome/common/extensions/api/api_features.h"
@@ -108,6 +115,7 @@ void ChromeExtensionsClient::Initialize() {
   if (!ManifestHandler::IsRegistrationFinalized()) {
     RegisterCommonManifestHandlers();
     RegisterChromeManifestHandlers();
+    // RegisterBraveManifestHandlers();
     ManifestHandler::FinalizeRegistration();
   }
 
@@ -142,13 +150,13 @@ std::unique_ptr<FeatureProvider> ChromeExtensionsClient::CreateFeatureProvider(
     const std::string& name) const {
   std::unique_ptr<FeatureProvider> provider;
   if (name == "api") {
-    provider.reset(new APIFeatureProvider());
+    provider.reset(new BraveAPIFeatureProvider());
   } else if (name == "manifest") {
-    provider.reset(new ManifestFeatureProvider());
+    provider.reset(new BraveManifestFeatureProvider());
   } else if (name == "permission") {
-    provider.reset(new PermissionFeatureProvider());
+    provider.reset(new BravePermissionFeatureProvider());
   } else if (name == "behavior") {
-    provider.reset(new BehaviorFeatureProvider());
+    provider.reset(new BraveBehaviorFeatureProvider());
   } else {
     NOTREACHED();
   }
@@ -161,6 +169,7 @@ ChromeExtensionsClient::CreateAPIFeatureSource() const {
       new JSONFeatureProviderSource("api"));
   source->LoadJSON(IDR_EXTENSION_API_FEATURES);
   source->LoadJSON(IDR_CHROME_EXTENSION_API_FEATURES);
+  source->LoadJSON(IDR_BRAVE_EXTENSION_API_FEATURES);
   return source;
 }
 
@@ -238,7 +247,8 @@ bool ChromeExtensionsClient::IsScriptableURL(
 bool ChromeExtensionsClient::IsAPISchemaGenerated(
     const std::string& name) const {
   // Test from most common to least common.
-  return api::ChromeGeneratedSchemas::IsGenerated(name) ||
+  return api::BraveGeneratedSchemas::IsGenerated(name) ||
+         api::ChromeGeneratedSchemas::IsGenerated(name) ||
          api::GeneratedSchemas::IsGenerated(name);
 }
 
@@ -248,6 +258,9 @@ base::StringPiece ChromeExtensionsClient::GetAPISchema(
   if (api::ChromeGeneratedSchemas::IsGenerated(name))
     return api::ChromeGeneratedSchemas::Get(name);
 
+  if (api::BraveGeneratedSchemas::IsGenerated(name))
+    return api::BraveGeneratedSchemas::Get(name);
+
   return api::GeneratedSchemas::Get(name);
 }
 
diff --git a/chrome/common/mac/app_mode_chrome_locator.mm b/chrome/common/mac/app_mode_chrome_locator.mm
index efd272e706ba56b748e4b76b96d76cbd03aa07ac..5ce343302a2ab3a18a9149a33203f5a2fe301b23 100644
--- a/chrome/common/mac/app_mode_chrome_locator.mm
+++ b/chrome/common/mac/app_mode_chrome_locator.mm
@@ -79,6 +79,7 @@ bool GetChromeBundleInfo(const base::FilePath& chrome_bundle,
   // However, we want the shims to be agnostic to distribution and operate based
   // on the data in their plist, so encode the framework names here.
   NSDictionary* framework_for_exe = @{
+    @"Brave": @"Brave",
     @"Chromium": @"Chromium",
     @"Google Chrome": @"Google Chrome",
     @"Google Chrome Canary": @"Google Chrome",
diff --git a/chrome/renderer/chrome_content_renderer_client.h b/chrome/renderer/chrome_content_renderer_client.h
index 6de49b0d3dcecdd31370a85625c621cdd1935f90..47604d1e11fe40078a828db154a1f25ad5dc1d38 100644
--- a/chrome/renderer/chrome_content_renderer_client.h
+++ b/chrome/renderer/chrome_content_renderer_client.h
@@ -231,6 +231,7 @@ class ChromeContentRendererClient : public content::ContentRendererClient {
 #endif
 
  private:
+  friend class BraveContentRendererClient;
   FRIEND_TEST_ALL_PREFIXES(ChromeContentRendererClientTest, NaClRestriction);
   FRIEND_TEST_ALL_PREFIXES(ChromeContentRendererClientTest,
                            ShouldSuppressErrorPage);
diff --git a/chrome/utility/chrome_content_utility_client.h b/chrome/utility/chrome_content_utility_client.h
index c0132fecb0b9e8a91f288d6e6ecaad9dfdbec247..a6e307d6ddcee3ca0f75a91c459a690324ee0f3a 100644
--- a/chrome/utility/chrome_content_utility_client.h
+++ b/chrome/utility/chrome_content_utility_client.h
@@ -35,6 +35,7 @@ class ChromeContentUtilityClient : public content::ContentUtilityClient {
       const NetworkBinderCreationCallback& callback);
 
  private:
+  friend class BraveContentUtilityClient;
   // IPC message handlers.
   using Handlers = std::vector<std::unique_ptr<UtilityMessageHandler>>;
   Handlers handlers_;
diff --git a/components/omnibox/browser/autocomplete_controller.h b/components/omnibox/browser/autocomplete_controller.h
index 78bd103d8b321dced350dedc4ccdcce8f89d4bb6..b64bdd24fb0390228abdb21a94f20a40f7572885 100644
--- a/components/omnibox/browser/autocomplete_controller.h
+++ b/components/omnibox/browser/autocomplete_controller.h
@@ -139,6 +139,7 @@ class AutocompleteController : public AutocompleteProviderListener {
   }
 
  private:
+  friend class BraveAutocompleteController;
   friend class AutocompleteProviderTest;
   FRIEND_TEST_ALL_PREFIXES(AutocompleteProviderTest,
                            RedundantKeywordsIgnoredInResult);
diff --git a/components/omnibox/browser/omnibox_controller.cc b/components/omnibox/browser/omnibox_controller.cc
index 75a76658b52a64a1a3b142bfd26c57a311f8f4dc..98a21008d4867d7f465e64a7269ffe96fe9ed711 100644
--- a/components/omnibox/browser/omnibox_controller.cc
+++ b/components/omnibox/browser/omnibox_controller.cc
@@ -14,12 +14,14 @@
 #include "components/omnibox/browser/omnibox_popup_view.h"
 #include "ui/gfx/geometry/rect.h"
 
+#include "brave/components/omnibox/browser/brave_autocomplete_controller.h"
+
 OmniboxController::OmniboxController(OmniboxEditModel* omnibox_edit_model,
                                      OmniboxClient* client)
     : omnibox_edit_model_(omnibox_edit_model),
       client_(client),
       popup_(nullptr),
-      autocomplete_controller_(new AutocompleteController(
+      autocomplete_controller_(new BraveAutocompleteController(
           client_->CreateAutocompleteProviderClient(),
           this,
           AutocompleteClassifier::DefaultOmniboxProviders())),
diff --git a/components/strings/BUILD.gn b/components/strings/BUILD.gn
index a299d38baf7f0c82dad33dc37764eba5db4ba856..218b83b4c65fe269dd4c3e5b7b51aa44fc4119ac 100644
--- a/components/strings/BUILD.gn
+++ b/components/strings/BUILD.gn
@@ -93,7 +93,7 @@ if (is_android) {
 }
 
 grit("components_chromium_strings") {
-  source = "../components_chromium_strings.grd"
+  source = "../components_${branding_path_component}_strings.grd"
   outputs = [
     "grit/components_chromium_strings.h",
   ]
diff --git a/extensions/browser/extension_event_histogram_value.h b/extensions/browser/extension_event_histogram_value.h
index 6b388cec2f2f769ebfec1aced038713932fd8a2e..b6198d06761a701b80d82b1bb6e11b121fa4aa56 100644
--- a/extensions/browser/extension_event_histogram_value.h
+++ b/extensions/browser/extension_event_histogram_value.h
@@ -428,6 +428,10 @@ enum HistogramValue {
   LOCK_SCREEN_DATA_ON_DATA_ITEMS_AVAILABLE,
   WEB_VIEW_INTERNAL_ON_AUDIO_STATE_CHANGED,
   AUTOMATION_INTERNAL_ON_ACTION_RESULT,
+
+  BRAVE_START = 5000,
+  BRAVE_AD_BLOCKED,
+
   // Last entry: Add new entries above, then run:
   // python tools/metrics/histograms/update_extension_histograms.py
   ENUM_BOUNDARY
diff --git a/ios/chrome/browser/autocomplete/autocomplete_classifier_factory.cc b/ios/chrome/browser/autocomplete/autocomplete_classifier_factory.cc
index 11cdca53bd8c9e9c5d97715030f731226dde2984..f2aec7c949b201db1c06dd38226ee2ecf1aefb6f 100644
--- a/ios/chrome/browser/autocomplete/autocomplete_classifier_factory.cc
+++ b/ios/chrome/browser/autocomplete/autocomplete_classifier_factory.cc
@@ -17,6 +17,8 @@
 #include "ios/chrome/browser/browser_state/chrome_browser_state.h"
 #include "ios/chrome/browser/search_engines/template_url_service_factory.h"
 
+#include "brave/components/omnibox/browser/brave_autocomplete_controller.h"
+
 namespace ios {
 namespace {
 
@@ -25,7 +27,7 @@ std::unique_ptr<KeyedService> BuildAutocompleteClassifier(
   ios::ChromeBrowserState* browser_state =
       ios::ChromeBrowserState::FromBrowserState(context);
   return base::MakeUnique<AutocompleteClassifier>(
-      base::WrapUnique(new AutocompleteController(
+      base::WrapUnique(new BraveAutocompleteController(
           base::WrapUnique(new AutocompleteProviderClientImpl(browser_state)),
           nullptr, AutocompleteClassifier::DefaultOmniboxProviders())),
       base::WrapUnique(new AutocompleteSchemeClassifierImpl));
diff --git a/third_party/widevine/cdm/BUILD.gn b/third_party/widevine/cdm/BUILD.gn
index a3eac59cc2ebdb1f9d2bb7af8a7db0d44ab315a9..11d0c86fb7cdfc1881f563552fb6f5c5abdabae4 100644
--- a/third_party/widevine/cdm/BUILD.gn
+++ b/third_party/widevine/cdm/BUILD.gn
@@ -113,9 +113,10 @@ if (widevine_cdm_binary_files != []) {
     if (is_mac) {
       ldflags = [
         # Not to strip important symbols by -Wl,-dead_strip.
-        "-Wl,-exported_symbol,_PPP_GetInterface",
-        "-Wl,-exported_symbol,_PPP_InitializeModule",
-        "-Wl,-exported_symbol,_PPP_ShutdownModule",
+        # "-Wl,-exported_symbol,_PPP_GetInterface",
+        # "-Wl,-exported_symbol,_PPP_InitializeModule",
+        # "-Wl,-exported_symbol,_PPP_ShutdownModule",
+        "-Wl,-install_name,@loader_path/libwidevinecdm.dylib",
       ]
       #TODO(jrummell) Mac: 'DYLIB_INSTALL_NAME_BASE': '@loader_path',
     } else if (is_posix && !is_mac) {
diff --git a/tools/gritsettings/resource_ids b/tools/gritsettings/resource_ids
index ee0116d1852ba4d7ab0ab65f2ef8a70fc20636de..9fda56edc3b5934bc2f48a30ac1b733367ae724c 100644
--- a/tools/gritsettings/resource_ids
+++ b/tools/gritsettings/resource_ids
@@ -33,6 +33,9 @@
   # Chromium strings and Google Chrome strings must start at the same id.
   # We only use one file depending on whether we're building Chromium or
   # Google Chrome.
+  "chrome/app/brave_strings.grd": {
+    "messages": [400],
+  },
   "chrome/app/chromium_strings.grd": {
     "messages": [400],
   },
@@ -140,6 +143,9 @@
   # Chromium strings and Google Chrome strings must start at the same id.
   # We only use one file depending on whether we're building Chromium or
   # Google Chrome.
+  "components/components_brave_strings.grd": {
+    "messages": [15000],
+  },
   "components/components_chromium_strings.grd": {
     "messages": [15000],
   },
